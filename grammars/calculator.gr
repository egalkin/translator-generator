grammar bEgor

@header {
    import ru.ifmo.galkin.utils.MathUtils;
}

expr returns [Integer value]
    : mulDiv
        { Integer v = mulDiv.getValue(); }
        { value = v == null ? 0 : v;       }
      expr1<value>
        { if (expr1.getValue() != null) }
        {   value = expr1.getValue();  }
    ;

expr1 [Integer inVal] returns [Integer value]
    : opPlusMinus
        { String op = opPlusMinus.getValue();       }
      mulDiv
        { Integer v = mulDiv.getValue();             }
        { if (op.equals("+")) value = inVal + v;       }
        { else if (op.equals("-")) value = inVal - v;  }
        { else value = inVal;                          }
      expr1<value>
        { if (expr1.getValue() != null)             }
        {   value = expr1.getValue();               }
    |
    ;


opPlusMinus returns [String s]
    : PLUS  { s = "+";  }
    | MINUS { s = "-";  }
    ;

mulDiv returns [Integer value]
    : power
        { value = power.getValue();        }
      mulDiv1<value>
        { if (mulDiv1.getValue() != null)    }
        {   value = mulDiv1.getValue();     }
    ;

mulDiv1 [Integer inVal] returns [Integer value]
    : opMulDiv
        { String op = opMulDiv.getValue();          }
      power
        { Integer v = power.getValue();                }
        { if (op.equals("*")) value = inVal * v;       }
        { else if (op.equals("/")) value = inVal / v;  }
        { else value = inVal;                          }
      mulDiv1<value>
        { if (mulDiv1.getValue() != null)            }
        {   value = mulDiv1.getValue();             }
    |
    ;

opMulDiv returns [String s]
    : MUL   { s = "*";  }
    | DIV   { s = "/";  }
    ;

power returns [Integer value]
    : unary
        { Integer v = unary.getValue();    }
        { value = v == null ? 1 : v;       }
      power1<value>
        { if (power1.getValue() != null) }
        {   value = power1.getValue();  }
    ;


power1 [Integer inVal] returns [Integer value]
   : POW
     unary
       { Integer v = unary.getValue();             }
       { value = (int) Math.pow(inVal, v);         }
     power1<value>
       { if (power1.getValue() != null) }
       {   value = power1.getValue();  }
    |
   ;



unary returns [Integer value]
    :  opPlusMinus {String op = opPlusMinus.getValue();}
       term
         {value = term.getValue();}
         {if (op.equals("-")) value = 0 - value;}
       | term {value = term.getValue();}
             fact<value>
                  { Integer factVal = fact.getValue();    }
                  { if (factVal != null) value = factVal; }
    ;


fact [Integer inVal] returns [Integer value]
    : FACTORIAL
        { value = MathUtils.countFactorial(inVal);           }
      fact<value>
        { Integer factVal = fact.getValue();    }
        { if (factVal != null) value = factVal;    }
    |
    ;

term returns [Integer value]
    : VALUE
        { value = Integer.valueOf(VALUE.getValue());  }
    | LPAREN expr RPAREN
        { value = expr.getValue();                 }
;

LPAREN:     '(';
RPAREN:     ')';

PLUS:       '+';
MINUS:      '-';
MUL:        '*';
DIV:        '/';
POW:        '^';
FACTORIAL:  '!';

VALUE: [1-9][0-9]*;